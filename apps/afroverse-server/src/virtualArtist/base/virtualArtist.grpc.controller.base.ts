/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { VirtualArtistService } from "../virtualArtist.service";
import { VirtualArtistCreateInput } from "./VirtualArtistCreateInput";
import { VirtualArtistWhereInput } from "./VirtualArtistWhereInput";
import { VirtualArtistWhereUniqueInput } from "./VirtualArtistWhereUniqueInput";
import { VirtualArtistFindManyArgs } from "./VirtualArtistFindManyArgs";
import { VirtualArtistUpdateInput } from "./VirtualArtistUpdateInput";
import { VirtualArtist } from "./VirtualArtist";
import { AiStudioFindManyArgs } from "../../aiStudio/base/AiStudioFindManyArgs";
import { AiStudio } from "../../aiStudio/base/AiStudio";
import { AiStudioWhereUniqueInput } from "../../aiStudio/base/AiStudioWhereUniqueInput";
import { MusicChallengeFindManyArgs } from "../../musicChallenge/base/MusicChallengeFindManyArgs";
import { MusicChallenge } from "../../musicChallenge/base/MusicChallenge";
import { MusicChallengeWhereUniqueInput } from "../../musicChallenge/base/MusicChallengeWhereUniqueInput";
import { RecordLabelFindManyArgs } from "../../recordLabel/base/RecordLabelFindManyArgs";
import { RecordLabel } from "../../recordLabel/base/RecordLabel";
import { RecordLabelWhereUniqueInput } from "../../recordLabel/base/RecordLabelWhereUniqueInput";

export class VirtualArtistGrpcControllerBase {
  constructor(protected readonly service: VirtualArtistService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: VirtualArtist })
  @GrpcMethod("VirtualArtistService", "createVirtualArtist")
  async createVirtualArtist(
    @common.Body() data: VirtualArtistCreateInput
  ): Promise<VirtualArtist> {
    return await this.service.createVirtualArtist({
      data: {
        ...data,

        voiceCustomization: data.voiceCustomization
          ? {
              connect: data.voiceCustomization,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        description: true,
        genre: true,
        id: true,
        name: true,
        updatedAt: true,

        voiceCustomization: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [VirtualArtist] })
  @ApiNestedQuery(VirtualArtistFindManyArgs)
  @GrpcMethod("VirtualArtistService", "virtualArtists")
  async virtualArtists(
    @common.Req() request: Request
  ): Promise<VirtualArtist[]> {
    const args = plainToClass(VirtualArtistFindManyArgs, request.query);
    return this.service.virtualArtists({
      ...args,
      select: {
        createdAt: true,
        description: true,
        genre: true,
        id: true,
        name: true,
        updatedAt: true,

        voiceCustomization: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: VirtualArtist })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("VirtualArtistService", "virtualArtist")
  async virtualArtist(
    @common.Param() params: VirtualArtistWhereUniqueInput
  ): Promise<VirtualArtist | null> {
    const result = await this.service.virtualArtist({
      where: params,
      select: {
        createdAt: true,
        description: true,
        genre: true,
        id: true,
        name: true,
        updatedAt: true,

        voiceCustomization: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: VirtualArtist })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("VirtualArtistService", "updateVirtualArtist")
  async updateVirtualArtist(
    @common.Param() params: VirtualArtistWhereUniqueInput,
    @common.Body() data: VirtualArtistUpdateInput
  ): Promise<VirtualArtist | null> {
    try {
      return await this.service.updateVirtualArtist({
        where: params,
        data: {
          ...data,

          voiceCustomization: data.voiceCustomization
            ? {
                connect: data.voiceCustomization,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          description: true,
          genre: true,
          id: true,
          name: true,
          updatedAt: true,

          voiceCustomization: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: VirtualArtist })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("VirtualArtistService", "deleteVirtualArtist")
  async deleteVirtualArtist(
    @common.Param() params: VirtualArtistWhereUniqueInput
  ): Promise<VirtualArtist | null> {
    try {
      return await this.service.deleteVirtualArtist({
        where: params,
        select: {
          createdAt: true,
          description: true,
          genre: true,
          id: true,
          name: true,
          updatedAt: true,

          voiceCustomization: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/aiStudios")
  @ApiNestedQuery(AiStudioFindManyArgs)
  @GrpcMethod("VirtualArtistService", "findManyAiStudios")
  async findManyAiStudios(
    @common.Req() request: Request,
    @common.Param() params: VirtualArtistWhereUniqueInput
  ): Promise<AiStudio[]> {
    const query = plainToClass(AiStudioFindManyArgs, request.query);
    const results = await this.service.findAiStudios(params.id, {
      ...query,
      select: {
        composition: true,
        createdAt: true,
        id: true,
        mixing: true,
        production: true,
        updatedAt: true,

        virtualArtist: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/aiStudios")
  @GrpcMethod("VirtualArtistService", "connectAiStudios")
  async connectAiStudios(
    @common.Param() params: VirtualArtistWhereUniqueInput,
    @common.Body() body: AiStudioWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      aiStudios: {
        connect: body,
      },
    };
    await this.service.updateVirtualArtist({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/aiStudios")
  @GrpcMethod("VirtualArtistService", "updateAiStudios")
  async updateAiStudios(
    @common.Param() params: VirtualArtistWhereUniqueInput,
    @common.Body() body: AiStudioWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      aiStudios: {
        set: body,
      },
    };
    await this.service.updateVirtualArtist({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/aiStudios")
  @GrpcMethod("VirtualArtistService", "disconnectAiStudios")
  async disconnectAiStudios(
    @common.Param() params: VirtualArtistWhereUniqueInput,
    @common.Body() body: AiStudioWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      aiStudios: {
        disconnect: body,
      },
    };
    await this.service.updateVirtualArtist({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/musicChallenges")
  @ApiNestedQuery(MusicChallengeFindManyArgs)
  @GrpcMethod("VirtualArtistService", "findManyMusicChallenges")
  async findManyMusicChallenges(
    @common.Req() request: Request,
    @common.Param() params: VirtualArtistWhereUniqueInput
  ): Promise<MusicChallenge[]> {
    const query = plainToClass(MusicChallengeFindManyArgs, request.query);
    const results = await this.service.findMusicChallenges(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        id: true,
        rewards: true,
        title: true,
        updatedAt: true,

        virtualArtist: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/musicChallenges")
  @GrpcMethod("VirtualArtistService", "connectMusicChallenges")
  async connectMusicChallenges(
    @common.Param() params: VirtualArtistWhereUniqueInput,
    @common.Body() body: MusicChallengeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      musicChallenges: {
        connect: body,
      },
    };
    await this.service.updateVirtualArtist({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/musicChallenges")
  @GrpcMethod("VirtualArtistService", "updateMusicChallenges")
  async updateMusicChallenges(
    @common.Param() params: VirtualArtistWhereUniqueInput,
    @common.Body() body: MusicChallengeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      musicChallenges: {
        set: body,
      },
    };
    await this.service.updateVirtualArtist({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/musicChallenges")
  @GrpcMethod("VirtualArtistService", "disconnectMusicChallenges")
  async disconnectMusicChallenges(
    @common.Param() params: VirtualArtistWhereUniqueInput,
    @common.Body() body: MusicChallengeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      musicChallenges: {
        disconnect: body,
      },
    };
    await this.service.updateVirtualArtist({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/recordLabels")
  @ApiNestedQuery(RecordLabelFindManyArgs)
  @GrpcMethod("VirtualArtistService", "findManyRecordLabels")
  async findManyRecordLabels(
    @common.Req() request: Request,
    @common.Param() params: VirtualArtistWhereUniqueInput
  ): Promise<RecordLabel[]> {
    const query = plainToClass(RecordLabelFindManyArgs, request.query);
    const results = await this.service.findRecordLabels(params.id, {
      ...query,
      select: {
        analytics: true,
        createdAt: true,
        id: true,
        name: true,
        promotions: true,
        updatedAt: true,

        virtualArtist: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/recordLabels")
  @GrpcMethod("VirtualArtistService", "connectRecordLabels")
  async connectRecordLabels(
    @common.Param() params: VirtualArtistWhereUniqueInput,
    @common.Body() body: RecordLabelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recordLabels: {
        connect: body,
      },
    };
    await this.service.updateVirtualArtist({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/recordLabels")
  @GrpcMethod("VirtualArtistService", "updateRecordLabels")
  async updateRecordLabels(
    @common.Param() params: VirtualArtistWhereUniqueInput,
    @common.Body() body: RecordLabelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recordLabels: {
        set: body,
      },
    };
    await this.service.updateVirtualArtist({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/recordLabels")
  @GrpcMethod("VirtualArtistService", "disconnectRecordLabels")
  async disconnectRecordLabels(
    @common.Param() params: VirtualArtistWhereUniqueInput,
    @common.Body() body: RecordLabelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recordLabels: {
        disconnect: body,
      },
    };
    await this.service.updateVirtualArtist({
      where: params,
      data,
      select: { id: true },
    });
  }
}
